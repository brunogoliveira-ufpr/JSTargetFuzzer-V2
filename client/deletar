import os
import re
import pandas as pd

def analyze_files_with_pandas(directory_path):
    files = os.listdir(directory_path)
    
    # Regex pattern to match the ID and weight in the filename
    pattern = re.compile(r'program_([A-Z0-9-]+)weight(\d+)\.txt$')
    
    file_data = []

    for file in files:
        match = pattern.search(file)
        if match:
            program_id = match.group(1)
            weight = int(match.group(2))
            file_data.append((file, program_id, weight))
    
    if not file_data:
        print("Não há arquivos suficientes para realizar a análise.")
        return
    
    # Create a DataFrame
    df = pd.DataFrame(file_data, columns=['filename', 'program_id', 'weight'])
    
    # Total number of unique programs
    total_programs = df['program_id'].nunique()
    
    # Total count of files by weight
    total_by_weight = df['weight'].value_counts().sort_index()
    
    # Average number of files for each weight
    avg_by_weight = df.groupby('weight')['filename'].count().mean()

    # Calculate average number of files (structures) for weight 1 and weight 500
    avg_weight_1 = df[df['weight'] == 1]['filename'].count()
    avg_weight_500 = df[df['weight'] == 500]['filename'].count()

    # Display results
    print(f"Total de programas únicos: {total_programs}")
    print(f"Quantidade total de arquivos por peso:\n{total_by_weight}")
    print(f"Média de arquivos por peso: {avg_by_weight}")
    print(f"Média de estruturas (arquivos) com Peso 1: {avg_weight_1}")
    print(f"Média de estruturas (arquivos) com Peso 500: {avg_weight_500}")
    print(f"Comparação: {'Peso 1 tem mais estruturas' if avg_weight_1 > avg_weight_500 else 'Peso 500 tem mais estruturas' if avg_weight_500 > avg_weight_1 else 'Pesos iguais'}")

# Exemplo de uso
directory_path = "/home/kali/JSTargetFuzzer-main/programs/jst-jsc-files/files"
analyze_files_with_pandas(directory_path)
