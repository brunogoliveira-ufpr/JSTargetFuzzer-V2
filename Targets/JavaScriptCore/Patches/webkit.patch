diff --git a/Source/JavaScriptCore/jsc.cpp b/Source/JavaScriptCore/jsc.cpp
index 6fb196a14cad..d82015528be6 100644
--- a/Source/JavaScriptCore/jsc.cpp
+++ b/Source/JavaScriptCore/jsc.cpp
@@ -172,7 +172,96 @@ struct MemoryFootprint {
 #if !defined(PATH_MAX)
 #define PATH_MAX 4096
 #endif
+//
+// BEGIN FUZZING CODE
+//
 
+#include <fcntl.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/wait.h>
+#include <sys/mman.h>
+
+#define REPRL_CRFD 100
+#define REPRL_CWFD 101
+#define REPRL_DRFD 102
+#define REPRL_DWFD 103
+#define REPRL_MAX_DATA_SIZE (16*1024*1024)
+
+#define SHM_SIZE 0x100000
+#define MAX_EDGES ((SHM_SIZE - 4) * 8)
+
+#define CHECK(cond) if (!(cond)) { fprintf(stderr, "\"" #cond "\" failed\n"); exit(EXIT_FAILURE); }
+
+// Shared memory buffer with the parent.
+char* reprl_input_data;
+
+struct shmem_data {
+    uint32_t num_edges;
+    unsigned char edges[];
+};
+
+struct shmem_data* __shmem;
+uint32_t *__edges_start, *__edges_stop;
+
+void __sanitizer_cov_reset_edgeguards() {
+    uint64_t N = 0;
+    for (uint32_t *x = __edges_start; x < __edges_stop && N < MAX_EDGES; x++)
+        *x = ++N;
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard_init(uint32_t *start, uint32_t *stop) {
+    // Avoid duplicate initialization
+    if (start == stop || *start)
+        return;
+
+    if (__edges_start != NULL || __edges_stop != NULL) {
+        fprintf(stderr, "Coverage instrumentation is only supported for a single module\n");
+        _exit(-1);
+    }
+
+    __edges_start = start;
+    __edges_stop = stop;
+
+    // Map the shared memory region
+    const char* shm_key = getenv("SHM_ID");
+    if (!shm_key) {
+        puts("[COV] no shared memory bitmap available, skipping");
+        __shmem = (struct shmem_data*) malloc(SHM_SIZE);
+    } else {
+        int fd = shm_open(shm_key, O_RDWR, S_IREAD | S_IWRITE);
+        if (fd <= -1) {
+            fprintf(stderr, "Failed to open shared memory region: %s\n", strerror(errno));
+            _exit(-1);
+        }
+
+        __shmem = (struct shmem_data*) mmap(0, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+        if (__shmem == MAP_FAILED) {
+            fprintf(stderr, "Failed to mmap shared memory region\n");
+            _exit(-1);
+        }
+    }
+
+    __sanitizer_cov_reset_edgeguards();
+
+    __shmem->num_edges = stop - start;
+    printf("[COV] edge counters initialized. Shared memory: %s with %u edges\n", shm_key, __shmem->num_edges);
+}
+
+extern "C" void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {
+    // There's a small race condition here: if this function executes in two threads for the same
+    // edge at the same time, the first thread might disable the edge (by setting the guard to zero)
+    // before the second thread fetches the guard value (and thus the index). However, our
+    // instrumentation ignores the first edge (see libcoverage.c) and so the race is unproblematic.
+    uint32_t index = *guard;
+    __shmem->edges[index / 8] |= 1 << (index % 8);
+    *guard = 0;
+}
+
+//
+// END FUZZING CODE
+//
 using namespace JSC;
 
 namespace {
@@ -204,7 +293,7 @@ static unsigned asyncTestExpectedPasses { 0 };
 
 template<typename Vector>
 static bool fillBufferWithContentsOfFile(const String& fileName, Vector& buffer);
-static RefPtr<Uint8Array> fillBufferWithContentsOfFile(const String& fileName);
+//static RefPtr<Uint8Array> fillBufferWithContentsOfFile(const String& fileName);
 
 class CommandLine;
 class GlobalObject;
@@ -296,26 +385,26 @@ static JSC_DECLARE_HOST_FUNCTION(functionPrettyPrint);
 static JSC_DECLARE_HOST_FUNCTION(functionDebug);
 static JSC_DECLARE_HOST_FUNCTION(functionDescribe);
 static JSC_DECLARE_HOST_FUNCTION(functionDescribeArray);
-static JSC_DECLARE_HOST_FUNCTION(functionSleepSeconds);
+//static JSC_DECLARE_HOST_FUNCTION(functionSleepSeconds);
 static JSC_DECLARE_HOST_FUNCTION(functionJSCStack);
 static JSC_DECLARE_HOST_FUNCTION(functionGCAndSweep);
 static JSC_DECLARE_HOST_FUNCTION(functionFullGC);
 static JSC_DECLARE_HOST_FUNCTION(functionEdenGC);
-static JSC_DECLARE_HOST_FUNCTION(functionHeapSize);
-static JSC_DECLARE_HOST_FUNCTION(functionMemoryUsageStatistics);
-static JSC_DECLARE_HOST_FUNCTION(functionCreateMemoryFootprint);
-static JSC_DECLARE_HOST_FUNCTION(functionResetMemoryPeak);
-static JSC_DECLARE_HOST_FUNCTION(functionAddressOf);
-static JSC_DECLARE_HOST_FUNCTION(functionVersion);
-static JSC_DECLARE_HOST_FUNCTION(functionRun);
-static JSC_DECLARE_HOST_FUNCTION(functionRunString);
-static JSC_DECLARE_HOST_FUNCTION(functionLoad);
-static JSC_DECLARE_HOST_FUNCTION(functionLoadString);
-static JSC_DECLARE_HOST_FUNCTION(functionReadFile);
-static JSC_DECLARE_HOST_FUNCTION(functionWriteFile);
-static JSC_DECLARE_HOST_FUNCTION(functionCheckSyntax);
-static JSC_DECLARE_HOST_FUNCTION(functionOpenFile);
-static JSC_DECLARE_HOST_FUNCTION(functionReadline);
+//static JSC_DECLARE_HOST_FUNCTION(functionHeapSize);
+//static JSC_DECLARE_HOST_FUNCTION(functionMemoryUsageStatistics);
+//static JSC_DECLARE_HOST_FUNCTION(functionCreateMemoryFootprint);
+//static JSC_DECLARE_HOST_FUNCTION(functionResetMemoryPeak);
+//static JSC_DECLARE_HOST_FUNCTION(functionAddressOf);
+//static JSC_DECLARE_HOST_FUNCTION(functionVersion);
+//static JSC_DECLARE_HOST_FUNCTION(functionRun);
+//static JSC_DECLARE_HOST_FUNCTION(functionRunString);
+//static JSC_DECLARE_HOST_FUNCTION(functionLoad);
+//static JSC_DECLARE_HOST_FUNCTION(functionLoadString);
+//static JSC_DECLARE_HOST_FUNCTION(functionReadFile);
+//static JSC_DECLARE_HOST_FUNCTION(functionWriteFile);
+//static JSC_DECLARE_HOST_FUNCTION(functionCheckSyntax);
+//static JSC_DECLARE_HOST_FUNCTION(functionOpenFile);
+//static JSC_DECLARE_HOST_FUNCTION(functionReadline);
 static JSC_DECLARE_HOST_FUNCTION(functionPreciseTime);
 static JSC_DECLARE_HOST_FUNCTION(functionNeverInlineFunction);
 static JSC_DECLARE_HOST_FUNCTION(functionNoDFG);
@@ -327,8 +416,8 @@ static JSC_DECLARE_HOST_FUNCTION(functionCallerIsBBQOrOMGCompiled);
 static JSC_DECLARE_HOST_FUNCTION(functionJSCOptions);
 static JSC_DECLARE_HOST_FUNCTION(functionReoptimizationRetryCount);
 static JSC_DECLARE_HOST_FUNCTION(functionTransferArrayBuffer);
-static JSC_DECLARE_HOST_FUNCTION(functionFailNextNewCodeBlock);
-static NO_RETURN_WITH_VALUE JSC_DECLARE_HOST_FUNCTION(functionQuit);
+//static JSC_DECLARE_HOST_FUNCTION(functionFailNextNewCodeBlock);
+//static NO_RETURN_WITH_VALUE JSC_DECLARE_HOST_FUNCTION(functionQuit);
 static JSC_DECLARE_HOST_FUNCTION(functionFalse);
 static JSC_DECLARE_HOST_FUNCTION(functionUndefined1);
 static JSC_DECLARE_HOST_FUNCTION(functionUndefined2);
@@ -396,6 +485,7 @@ static JSC_DECLARE_HOST_FUNCTION(functionFlashHeapAccess);
 static JSC_DECLARE_HOST_FUNCTION(functionDisableRichSourceInfo);
 static JSC_DECLARE_HOST_FUNCTION(functionMallocInALoop);
 static JSC_DECLARE_HOST_FUNCTION(functionTotalCompileTime);
+static JSC_DECLARE_HOST_FUNCTION(functionFuzzilli);
 
 static JSC_DECLARE_HOST_FUNCTION(functionSetUnhandledRejectionCallback);
 static JSC_DECLARE_HOST_FUNCTION(functionAsDoubleNumber);
@@ -415,7 +505,8 @@ struct Script {
 
     enum class CodeSource {
         File,
-        CommandLine
+        CommandLine,
+        REPRL
     };
 
     StrictMode strictMode;
@@ -449,6 +540,7 @@ public:
     String m_profilerOutput;
     String m_uncaughtExceptionName;
     bool m_interactive { false };
+    bool m_reprl { false };
     bool m_dump { false };
     bool m_module { false };
     bool m_exitCode { false };
@@ -549,29 +641,10 @@ private:
         addFunction(vm, "print"_s, functionPrintStdOut, 1);
         addFunction(vm, "printErr"_s, functionPrintStdErr, 1);
         addFunction(vm, "prettyPrint"_s, functionPrettyPrint, 1);
-        addFunction(vm, "quit"_s, functionQuit, 0);
         addFunction(vm, "gc"_s, functionGCAndSweep, 0);
         addFunction(vm, "fullGC"_s, functionFullGC, 0);
         addFunction(vm, "edenGC"_s, functionEdenGC, 0);
-        addFunction(vm, "gcHeapSize"_s, functionHeapSize, 0);
-        addFunction(vm, "memoryUsageStatistics"_s, functionMemoryUsageStatistics, 0);
-        addFunction(vm, "MemoryFootprint"_s, functionCreateMemoryFootprint, 0);
-        addFunction(vm, "resetMemoryPeak"_s, functionResetMemoryPeak, 0);
-        addFunction(vm, "addressOf"_s, functionAddressOf, 1);
-        addFunction(vm, "version"_s, functionVersion, 1);
-        addFunction(vm, "run"_s, functionRun, 1);
-        addFunction(vm, "runString"_s, functionRunString, 1);
-        addFunction(vm, "load"_s, functionLoad, 1);
-        addFunction(vm, "loadString"_s, functionLoadString, 1);
-        addFunction(vm, "readFile"_s, functionReadFile, 2);
-        addFunction(vm, "read"_s, functionReadFile, 2);
-        addFunction(vm, "writeFile"_s, functionWriteFile, 2);
-        addFunction(vm, "write"_s, functionWriteFile, 2);
-        addFunction(vm, "checkSyntax"_s, functionCheckSyntax, 1);
-        addFunction(vm, "sleepSeconds"_s, functionSleepSeconds, 1);
         addFunction(vm, "jscStack"_s, functionJSCStack, 1);
-        addFunction(vm, "openFile"_s, functionOpenFile, 1);
-        addFunction(vm, "readline"_s, functionReadline, 0);
         addFunction(vm, "preciseTime"_s, functionPreciseTime, 0);
         addFunction(vm, "neverInlineFunction"_s, functionNeverInlineFunction, 1);
         addFunction(vm, "noInline"_s, functionNeverInlineFunction, 1);
@@ -584,7 +657,6 @@ private:
         addFunction(vm, "optimizeNextInvocation"_s, functionOptimizeNextInvocation, 1);
         addFunction(vm, "reoptimizationRetryCount"_s, functionReoptimizationRetryCount, 1);
         addFunction(vm, "transferArrayBuffer"_s, functionTransferArrayBuffer, 1);
-        addFunction(vm, "failNextNewCodeBlock"_s, functionFailNextNewCodeBlock, 1);
 #if ENABLE(SAMPLING_FLAGS)
         addFunction(vm, "setSamplingFlags"_s, functionSetSamplingFlags, 1);
         addFunction(vm, "clearSamplingFlags"_s, functionClearSamplingFlags, 1);
@@ -662,8 +734,8 @@ private:
         Structure* plainObjectStructure = JSFinalObject::createStructure(vm, this, objectPrototype(), 0);
         
         JSObject* dollar = JSFinalObject::create(vm, plainObjectStructure);
-        putDirect(vm, Identifier::fromString(vm, "$"_s), dollar, DontEnum);
-        putDirect(vm, Identifier::fromString(vm, "$262"_s), dollar, DontEnum);
+        //putDirect(vm, Identifier::fromString(vm, "$"_s), dollar, DontEnum);
+        //putDirect(vm, Identifier::fromString(vm, "$262"_s), dollar, DontEnum);
         
         addFunction(vm, dollar, "createRealm"_s, functionDollarCreateRealm, 0, static_cast<unsigned>(PropertyAttribute::None));
         addFunction(vm, dollar, "detachArrayBuffer"_s, functionTransferArrayBuffer, 1, static_cast<unsigned>(PropertyAttribute::None));
@@ -704,6 +776,8 @@ private:
         addFunction(vm, "mallocInALoop"_s, functionMallocInALoop, 0);
         addFunction(vm, "totalCompileTime"_s, functionTotalCompileTime, 0);
 
+        addFunction(vm, "fuzzilli"_s, functionFuzzilli, 2);
+
         addFunction(vm, "setUnhandledRejectionCallback"_s, functionSetUnhandledRejectionCallback, 1);
 
         addFunction(vm, "asDoubleNumber"_s, functionAsDoubleNumber, 1);
@@ -752,6 +826,7 @@ private:
     static Identifier moduleLoaderResolve(JSGlobalObject*, JSModuleLoader*, JSValue, JSValue, JSValue);
     static JSInternalPromise* moduleLoaderFetch(JSGlobalObject*, JSModuleLoader*, JSValue, JSValue, JSValue);
     static JSObject* moduleLoaderCreateImportMetaProperties(JSGlobalObject*, JSModuleLoader*, JSValue, JSModuleRecord*, JSValue);
+    static void promiseRejectionTracker(JSGlobalObject*, JSPromise*, JSPromiseRejectionOperation);
 
     static void reportUncaughtExceptionAtEventLoop(JSGlobalObject*, Exception*);
 };
@@ -775,7 +850,7 @@ const GlobalObjectMethodTable GlobalObject::s_globalObjectMethodTable = {
     &moduleLoaderFetch,
     &moduleLoaderCreateImportMetaProperties,
     nullptr, // moduleLoaderEvaluate
-    nullptr, // promiseRejectionTracker
+    &promiseRejectionTracker,
     &reportUncaughtExceptionAtEventLoop,
     &currentScriptExecutionOwner,
     &scriptExecutionStatus,
@@ -995,6 +1070,7 @@ static void convertShebangToJSComment(Vector& buffer)
     }
 }
 
+/*
 static RefPtr<Uint8Array> fillBufferWithContentsOfFile(FILE* file)
 {
     if (fseek(file, 0, SEEK_END) == -1)
@@ -1012,7 +1088,9 @@ static RefPtr<Uint8Array> fillBufferWithContentsOfFile(FILE* file)
         return nullptr;
     return result;
 }
+*/
 
+/*
 static RefPtr<Uint8Array> fillBufferWithContentsOfFile(const String& fileName)
 {
     FILE* f = fopen(fileName.utf8().data(), "rb");
@@ -1026,6 +1104,7 @@ static RefPtr<Uint8Array> fillBufferWithContentsOfFile(const String& fileName)
 
     return result;
 }
+*/
 
 template<typename Vector>
 static bool fillBufferWithContentsOfFile(FILE* file, Vector& buffer)
@@ -1316,6 +1395,18 @@ JSObject* GlobalObject::moduleLoaderCreateImportMetaProperties(JSGlobalObject* g
     return metaProperties;
 }
 
+static int numPendingRejectedPromises = 0;
+void GlobalObject::promiseRejectionTracker(JSGlobalObject*, JSPromise*, JSPromiseRejectionOperation operation) {
+    switch (operation) {
+    case JSPromiseRejectionOperation::Reject:
+        numPendingRejectedPromises += 1;
+        break;
+    case JSPromiseRejectionOperation::Handle:
+        numPendingRejectedPromises -= 1;
+        break;
+    }
+}
+
 template <typename T>
 static CString toCString(JSGlobalObject* globalObject, ThrowScope& scope, T& string)
 {
@@ -1436,6 +1527,55 @@ JSC_DEFINE_HOST_FUNCTION(functionBtoa, (JSGlobalObject* globalObject, CallFrame*
     return JSValue::encode(jsString(vm, encodedString));
 }
 
+// We have to assume that the fuzzer will be able to call this function e.g. by
+// enumerating the properties of the global object and eval'ing them. As such
+// this function is implemented in a way that requires passing some magic value
+// as first argument (with the idea being that the fuzzer won't be able to
+// generate this value) which then also acts as a selector for the operation
+// to perform.
+JSC_DEFINE_HOST_FUNCTION(functionFuzzilli, (JSGlobalObject* globalObject, CallFrame* callFrame))
+{
+    VM& vm = globalObject->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
+    if (!callFrame->argument(0).isString()) {
+        // We directly require a string as argument for simplicity
+        return JSValue::encode(jsUndefined());
+    }
+    auto operation = callFrame->argument(0).toString(globalObject)->value(globalObject);
+    RETURN_IF_EXCEPTION(scope, encodedJSValue());
+
+    if (operation == "FUZZILLI_CRASH"_s) {
+        auto arg = callFrame->argument(1).toInt32(globalObject);
+        RETURN_IF_EXCEPTION(scope, encodedJSValue());
+        switch (arg) {
+            case 0:
+                *((int*)0x41414141) = 0x1337;
+                break;
+            case 1:
+                RELEASE_ASSERT(0);
+                break;
+            case 2:
+                ASSERT(0);
+                break;
+        }
+    } else if (operation == "FUZZILLI_PRINT"_s) {
+        static FILE* fzliout = fdopen(REPRL_DWFD, "w");
+        if (!fzliout) {
+            fprintf(stderr, "Fuzzer output channel not available, printing to stdout instead\n");
+            fzliout = stdout;
+        }
+
+        String string = callFrame->argument(1).toWTFString(globalObject);
+        RETURN_IF_EXCEPTION(scope, { });
+        auto cString = toCString(globalObject, scope, string);
+        RETURN_IF_EXCEPTION(scope, { });
+        fprintf(fzliout, "%s\n", cString.data());
+        fflush(fzliout);
+    }
+
+    return JSValue::encode(jsUndefined());
+}
+
 JSC_DEFINE_HOST_FUNCTION(functionDebug, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1471,6 +1611,7 @@ JSC_DEFINE_HOST_FUNCTION(functionDescribeArray, (JSGlobalObject* globalObject, C
     return JSValue::encode(jsNontrivialString(vm, toString("<Butterfly: ", RawPointer(object->butterfly()), "; public length: ", object->getArrayLength(), "; vector length: ", object->getVectorLength(), ">")));
 }
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionSleepSeconds, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1484,6 +1625,7 @@ JSC_DEFINE_HOST_FUNCTION(functionSleepSeconds, (JSGlobalObject* globalObject, Ca
     
     return JSValue::encode(jsUndefined());
 }
+*/
 
 class FunctionJSCStackFunctor {
 public:
@@ -1538,12 +1680,14 @@ JSC_DEFINE_HOST_FUNCTION(functionEdenGC, (JSGlobalObject* globalObject, CallFram
     return JSValue::encode(jsNumber(vm.heap.sizeAfterLastEdenCollection()));
 }
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionHeapSize, (JSGlobalObject* globalObject, CallFrame*))
 {
     VM& vm = globalObject->vm();
     JSLockHolder lock(vm);
     return JSValue::encode(jsNumber(vm.heap.size()));
 }
+*/
 
 class JSCMemoryFootprint : public JSDestructibleObject {
     using Base = JSDestructibleObject;
@@ -1597,28 +1741,35 @@ private:
 
 const ClassInfo JSCMemoryFootprint::s_info = { "MemoryFootprint"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSCMemoryFootprint) };
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionMemoryUsageStatistics, (JSGlobalObject* globalObject, CallFrame*))
 {
     auto contextRef = toRef(globalObject);
     return JSValue::encode(toJS(JSGetMemoryUsageStatistics(contextRef)));
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionCreateMemoryFootprint, (JSGlobalObject* globalObject, CallFrame*))
 {
     VM& vm = globalObject->vm();
     JSLockHolder lock(vm);
     return JSValue::encode(JSCMemoryFootprint::create(vm, globalObject));
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionResetMemoryPeak, (JSGlobalObject*, CallFrame*))
 {
     MemoryFootprint::resetPeak();
     return JSValue::encode(jsUndefined());
 }
+*/
 
 // This function is not generally very helpful in 64-bit code as the tag and payload
 // share a register. But in 32-bit JITed code the tag may not be checked if an
 // optimization removes type checking requirements, such as in ===.
+/*
 JSC_DEFINE_HOST_FUNCTION(functionAddressOf, (JSGlobalObject*, CallFrame* callFrame))
 {
     JSValue value = callFrame->argument(0);
@@ -1629,14 +1780,18 @@ JSC_DEFINE_HOST_FUNCTION(functionAddressOf, (JSGlobalObject*, CallFrame* callFra
     EncodedJSValue returnValue = JSValue::encode(jsNumber(bitwise_cast<double>(asNumber)));
     return returnValue;
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionVersion, (JSGlobalObject*, CallFrame*))
 {
     // We need this function for compatibility with the Mozilla JS tests but for now
     // we don't actually do any version-specific handling
     return JSValue::encode(jsUndefined());
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionRun, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1673,7 +1828,9 @@ JSC_DEFINE_HOST_FUNCTION(functionRun, (JSGlobalObject* globalObject, CallFrame*
     
     return JSValue::encode(jsNumber(stopWatch.getElapsedMS()));
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionRunString, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1704,6 +1861,7 @@ JSC_DEFINE_HOST_FUNCTION(functionRunString, (JSGlobalObject* globalObject, CallF
     
     return JSValue::encode(realm);
 }
+*/
 
 static URL computeFilePath(VM& vm, JSGlobalObject* globalObject, CallFrame* callFrame)
 {
@@ -1749,6 +1907,7 @@ JSC_DEFINE_HOST_FUNCTION(functionLoad, (JSGlobalObject* globalObject, CallFrame*
     return JSValue::encode(result);
 }
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionLoadString, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1766,7 +1925,9 @@ JSC_DEFINE_HOST_FUNCTION(functionLoadString, (JSGlobalObject* globalObject, Call
     }
     return JSValue::encode(result);
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionReadFile, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1797,7 +1958,9 @@ JSC_DEFINE_HOST_FUNCTION(functionReadFile, (JSGlobalObject* globalObject, CallFr
 
     return JSValue::encode(result);
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionWriteFile, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1844,7 +2007,9 @@ JSC_DEFINE_HOST_FUNCTION(functionWriteFile, (JSGlobalObject* globalObject, CallF
 
     return JSValue::encode(jsNumber(size));
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionCheckSyntax, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1867,6 +2032,7 @@ JSC_DEFINE_HOST_FUNCTION(functionCheckSyntax, (JSGlobalObject* globalObject, Cal
         throwException(globalObject, scope, syntaxException);
     return JSValue::encode(jsNumber(stopWatch.getElapsedMS()));
 }
+*/
 
 #if ENABLE(SAMPLING_FLAGS)
 JSC_DEFINE_HOST_FUNCTION(functionSetSamplingFlags, (JSGlobalObject*, CallFrame* callFrame))
@@ -1979,6 +2145,7 @@ private:
 
 const ClassInfo JSFileDescriptor::s_info = { "FileDescriptor"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSFileDescriptor) };
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionOpenFile, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     VM& vm = globalObject->vm();
@@ -1993,7 +2160,9 @@ JSC_DEFINE_HOST_FUNCTION(functionOpenFile, (JSGlobalObject* globalObject, CallFr
 
     RELEASE_AND_RETURN(scope, JSValue::encode(JSFileDescriptor::create(vm, globalObject, WTFMove(descriptor))));
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionReadline, (JSGlobalObject* globalObject, CallFrame* callFrame))
 {
     Vector<char, 256> line;
@@ -2012,6 +2181,7 @@ JSC_DEFINE_HOST_FUNCTION(functionReadline, (JSGlobalObject* globalObject, CallFr
     line.append('\0');
     return JSValue::encode(jsString(globalObject->vm(), String::fromLatin1(line.data())));
 }
+*/
 
 JSC_DEFINE_HOST_FUNCTION(functionPreciseTime, (JSGlobalObject*, CallFrame*))
 {
@@ -2578,13 +2748,16 @@ JSC_DEFINE_HOST_FUNCTION(functionTransferArrayBuffer, (JSGlobalObject* globalObj
     return JSValue::encode(jsUndefined());
 }
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionFailNextNewCodeBlock, (JSGlobalObject* globalObject, CallFrame*))
 {
     VM& vm = globalObject->vm();
     vm.setFailNextNewCodeBlock();
     return JSValue::encode(jsUndefined());
 }
+*/
 
+/*
 JSC_DEFINE_HOST_FUNCTION(functionQuit, (JSGlobalObject* globalObject, CallFrame*))
 {
     VM& vm = globalObject->vm();
@@ -2597,6 +2770,7 @@ JSC_DEFINE_HOST_FUNCTION(functionQuit, (JSGlobalObject* globalObject, CallFrame*
     return JSValue::encode(jsUndefined());
 #endif
 }
+*/
 
 JSC_DEFINE_HOST_FUNCTION(functionFalse, (JSGlobalObject*, CallFrame*))
 {
@@ -3412,7 +3586,15 @@ static void runWithOptions(GlobalObject* globalObject, CommandLine& options, boo
     for (size_t i = 0; i < scripts.size(); i++) {
         JSInternalPromise* promise = nullptr;
         bool isModule = options.m_module || scripts[i].scriptType == Script::ScriptType::Module;
-        if (scripts[i].codeSource == Script::CodeSource::File) {
+        if (scripts[i].codeSource == Script::CodeSource::REPRL) {
+            size_t script_size;
+            CHECK(read(REPRL_CRFD, &script_size, 8) == 8);
+            CHECK(script_size < REPRL_MAX_DATA_SIZE);
+            scriptBuffer.resize(script_size);
+            char* ptr = scriptBuffer.data();
+            memcpy(ptr, reprl_input_data, script_size);
+            fileName = "[REPRL]"_s;
+        } else if (scripts[i].codeSource == Script::CodeSource::File) {
             fileName = String::fromLatin1(scripts[i].argument);
             if (scripts[i].strictMode == Script::StrictMode::Strict)
                 scriptBuffer.append("\"use strict\";\n", strlen("\"use strict\";\n"));
@@ -3567,6 +3749,7 @@ static NO_RETURN void printUsageStatement(bool help = false)
     fprintf(stderr, "  -f         Specifies a source file (deprecated)\n");
     fprintf(stderr, "  -h|--help  Prints this help message\n");
     fprintf(stderr, "  -i         Enables interactive mode (default if no files are specified)\n");
+    fprintf(stderr, "  --reprl    Enables REPRL mode (used by the Fuzzilli fuzzer)\n");
     fprintf(stderr, "  -m         Execute as a module\n");
 #if OS(UNIX)
     fprintf(stderr, "  -s         Installs signal handlers that exit on a crash (Unix platforms only, lldb will not work with this option) \n");
@@ -3651,6 +3834,11 @@ void CommandLine::parseArguments(int argc, char** argv)
             m_interactive = true;
             continue;
         }
+        if (!strcmp(arg, "--reprl")) {
+            m_reprl = true;
+            m_scripts.append(Script(Script::StrictMode::Sloppy, Script::CodeSource::REPRL, Script::ScriptType::Script, nullptr));
+            continue;
+        }
         if (!strcmp(arg, "-d")) {
             m_dump = true;
             continue;
@@ -3842,7 +4030,37 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
         vm.m_typedArrayController = adoptRef(new JSC::SimpleTypedArrayController(false));
 
     int result;
-    bool success = true;
+    bool success;
+
+    // Let parent know we are ready
+    if (options.m_reprl) {
+        char helo[] = "HELO";
+        CHECK(write(REPRL_CWFD, helo, 4) == 4);
+        CHECK(read(REPRL_CRFD, helo, 4) == 4);
+
+        if (memcmp(helo, "HELO", 4) != 0) {
+            fprintf(stderr, "[REPRL] Invalid response from parent\n");
+            exit(EXIT_FAILURE);
+        }
+
+        // Mmap the data input buffer.
+        reprl_input_data = (char*)mmap(0, REPRL_MAX_DATA_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, REPRL_DRFD, 0);
+        CHECK(reprl_input_data != MAP_FAILED);
+    }
+
+    do {
+    // Keep indention for easier diffing
+    if (options.m_reprl) {
+        unsigned action;
+        CHECK(read(REPRL_CRFD, &action, 4) == 4);
+        if (action != 'cexe') {
+            fprintf(stderr, "[REPRL] Unknown action: %u\n", action);
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    success = true;
+
     GlobalObject* globalObject = nullptr;
     {
         JSLockHolder locker(vm);
@@ -3856,7 +4074,7 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
     vm.deferredWorkTimer->runRunLoop();
     {
         JSLockHolder locker(vm);
-        if (options.m_interactive && success)
+        if (!options.m_reprl && options.m_interactive && success)
             runInteractive(globalObject);
     }
 
@@ -3925,7 +4143,22 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
         dataLogLn(*vm.jitSizeStatistics);
 #endif
 
-    vm.codeCache()->write();
+    if (options.m_reprl) {
+        // In REPRL mode, stdout and stderr may be regular files, so we need to fflush them here.
+        fflush(stdout);
+        fflush(stderr);
+
+        // Check if any rejected promises weren't handled
+        if (numPendingRejectedPromises > 0) {
+            result = 1;
+            numPendingRejectedPromises = 0;
+        }
+
+        int status = (result & 0xff) << 8;
+        CHECK(write(REPRL_CWFD, &status, 4) == 4);
+        __sanitizer_cov_reset_edgeguards();
+    }
+    } while (options.m_reprl);
 
     if (options.m_destroyVM || isWorker) {
         JSLockHolder locker(vm);
@@ -3934,6 +4167,8 @@ int runJSC(const CommandLine& options, bool isWorker, const Func& func)
         vm.deref();
     }
 
+    vm.codeCache()->write();
+
     return result;
 }
 
